<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register | ChatGpt</title>
    <link rel="stylesheet" href="/styles/variables.css" />
    <link rel="stylesheet" href="/styles/auth-form.css" />
  </head>
  <body>
    <main class="auth-wrap">
      <section class="card" aria-labelledby="register-title">
        <!-- theme toggle -->
        <button
          class="theme-toggle"
          id="themeToggle"
          aria-label="Toggle theme"
          title="Toggle theme"
        >
          <!-- icons swap in JS by toggling innerHTML -->
          <svg
            id="themeIcon"
            viewBox="0 0 24 24"
            fill="none"
            aria-hidden="true"
          >
            <path
              d="M12 3v2M12 19v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
              stroke="currentColor"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
            <circle
              cx="12"
              cy="12"
              r="4"
              stroke="currentColor"
              stroke-width="1.5"
            />
          </svg>
        </button>

        <h1 id="register-title" class="title">Create account</h1>

        <form class="auth-form" action="/register" method="POST" novalidate>
          <label class="sr-only" for="username">Username</label>
          <input
            id="username"
            name="username"
            type="text"
            autocomplete="username"
            placeholder="Username"
            required
          />

          <label class="sr-only" for="email">Email</label>
          <input
            id="email"
            name="email"
            type="email"
            inputmode="email"
            autocomplete="email"
            placeholder="john@gmail.com"
            required
          />

          <div class="password-wrap">
            <label class="sr-only" for="password">Password</label>
            <input
              id="password"
              name="password"
              type="password"
              autocomplete="new-password"
              placeholder="Password"
              required
            />
            <button
              type="button"
              class="toggle-pass"
              aria-label="Show password"
            >
              Show
            </button>
          </div>

          <button type="submit" class="submit">Create account</button>
        </form>

        <p class="foot">Already have an account? <a href="/login">Log in</a></p>
      </section>
    </main>

    <script>
      // password toggle (existing)
      (function () {
        const btn = document.querySelector(".toggle-pass");
        const pwd = document.getElementById("password");
        if (btn && pwd) {
          btn.addEventListener("click", () => {
            const visible = pwd.type === "text";
            pwd.type = visible ? "password" : "text";
            btn.textContent = visible ? "Show" : "Hide";
          });
        }
      })();

      // theme toggle + persist + follow OS preference
      (function () {
        const root = document.documentElement;
        const toggle = document.getElementById("themeToggle");
        const icon = document.getElementById("themeIcon");

        const ICON_SUN =
          '<path d="M12 3v2M12 19v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="1.5" />';
        const ICON_MOON =
          '<path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none"/>';

        function setIcon(theme) {
          icon.innerHTML = theme === "dark" ? ICON_MOON : ICON_SUN;
        }

        function applyTheme(theme) {
          if (theme === "dark") root.setAttribute("data-theme", "dark");
          else root.removeAttribute("data-theme");
          setIcon(theme);
        }

        // initial: check saved, otherwise follow system
        const saved = localStorage.getItem("theme");
        if (saved === "dark" || saved === "light") {
          applyTheme(saved);
        } else {
          const osDark =
            window.matchMedia &&
            window.matchMedia("(prefers-color-scheme: dark)").matches;
          applyTheme(osDark ? "dark" : "light");
        }

        // toggle handler
        toggle.addEventListener("click", () => {
          const current =
            root.getAttribute("data-theme") === "dark" ? "dark" : "light";
          const next = current === "dark" ? "light" : "dark";
          applyTheme(next);
          localStorage.setItem("theme", next);
        });

        // if user changes system theme and hasn't chosen explicit preference, reflect it
        if (window.matchMedia) {
          window
            .matchMedia("(prefers-color-scheme: dark)")
            .addEventListener("change", (e) => {
              if (!localStorage.getItem("theme")) {
                applyTheme(e.matches ? "dark" : "light");
              }
            });
        }
      })();
    </script>
  </body>
</html>
